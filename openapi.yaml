openapi: 3.0.0
info:
  description: This is a simple CLV(customer lifetime value) Calculator server. Using past
    transaction data, models can be trained to predict which customers are
    likely to buy again.
  version: 1.0.0
  title: Customer Lifetime Value Calculator
  termsOfService: http://localhost.com
  contact:
    email: kristijan.petrovski@inplayer.com
  license:
    name: Licence Name
    url: https://www.google.com/
tags:
  - name: trainer
    description: Creating and modifying models
  - name: producer
    description: Producing with built models

paths:
  /producer:
    get:
      tags:
        - producer
      summary: Get results from an already trained model
      description: ""
      operationId: getModel
      parameters:
        - name: merchant_id
          in: query
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: return_customer_data
          in: query
          required: false
          description: Return individual customer data for all customers
          schema:
            type: boolean
        - name: forecast_time
          in: query
          required: false
          schema:
            type: object
            properties:
              days:
                type: integer
        - name: "meta_info"
          description: Meta info for models plotting and misc.
          in: "query"
          schema: 
            type: object
            properties:
              concise_display:
                type: boolean
              display_results_html:
                type: boolean
                description: "Chosen model plot results"
                  
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model-results"
        "400":
          description: Non validated input
    delete:
      tags:
        - producer
      summary: Delete an already trained model
      description: ""
      operationId: deleteModel
      parameters:
        - name: merchant_id
          in: query
          description: Delete models of the Merchant with this ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model-delete"
        "400":
          description: Non validated input
  /trainer:
    put:
      tags:
        - trainer
      summary: Train a new model
      description: ""
      operationId: addModel
      parameters:
        - name: merchant_id
          in: query
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: forecast_time
          in: query
          required: false
          schema:
            type: object
            properties:
              days:
                type: integer
        - name: "meta_info"
          description: Meta info for model choice and misc.
          in: "query"
          required: false
          schema: 
            type: object
            properties:
              from_trans_date:
                type: string
                format: date
              to_trans_date:
                type: string
                format: date
              model_choice:
                type: array
                items:
                  type: string
                  enum: [non-contract, profit-model,classifier]
                  default: non-contract
              model_class:
                type: array
                items:
                  type: string
                  default: beta_geo
              do_plots:
                type: boolean
                default: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model-results"
        "400":
          description: Non validated input
    post:
      tags:
        - trainer
      summary: Retrain a model
      description: ""
      operationId: updateModel
      parameters:
        - name: merchant_id
          in: query
          description: ID of merchant whose models will be updated
          required: true
          schema:
            type: integer
            format: int64
        
        - name: "meta_info"
          description: Meta info for model choice and misc.
          in: "query"
          required: false
          schema: 
            type: object
            properties:
              model_choice:
                type: array
                items:
                  type: string
                  enum: [non-contract, profit-model,classifier]
                  default: non-contract
            

      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/retrainer-results"
        "400":
          description: Non validated input data
  /dataset:
    get:
      tags:
        - dataset
      summary: Get dataset in use by a trained model
      description: ""
      operationId: getDataset
      parameters:
        - name: merchant_id
          in: query
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: return_customer_data
          in: query
          required: false
          description: Return individual customer data for all customers
          schema:
            type: boolean
        - name: forecast_time
          in: query
          required: false
          schema:
            type: object
            properties:
              days:
                type: integer
        - name: "meta_info"
          description: Meta info for models plotting and misc.
          in: "query"
          schema: 
            type: object
            properties:
              concise_display:
                type: boolean
              display_results_html:
                type: boolean
                description: "Chosen model plot results"
                  
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/model-results"
        "400":
          description: Non validated input          

externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://local/
  - url: http://local/
components:
  schemas:
    model-delete:
      type: object
      properties:
        status:
          type: string
          example: Deleted 2 models
    trainer-results:
      type: object
      properties:
        data_size:
          type: string
          description: good or warning for too little data
        f1_score:
          type: number
          format: double
        precision:
          type: number
          format: double
        recall:
          type: string
          format: double
        transactions_html:
          type: string
          description: HTML Code of visualization of transactions time series
        merchant_fullname:
          type: string
          description: Name
    retrainer-results:
      type: object
      properties:
        modelx_end_train_date:
          type: string
          format: date
          description: date when training ends
        modelx_from_date:
          type: string
          format: date
          description: date when training starts
        modelx_to_date:
          type: string
          format: date
          description: date when forecast ends
        modelx_f1_score:
          type: number
          format: double
        modelx_precision:
          type: number
          format: double
        modelx_recall:
          type: number
          format: double
        modelx_val_confusion_html:
          type: string
          description: HTML Code of visualization of confusion matrix
        modelx_val_new_purch_html:
          type: string
          description: HTML Code of visualization of predicted/actual new purchases
    model-results:
      type: object
      properties:
        modelx_end_train_date:
          type: string
          format: date
          description: date when training ends
        modelx_from_date:
          type: string
          format: date
          description: date when training starts
        modelx_to_date:
          type: string
          format: date
          description: date when forecast ends
        modelx_f1_score:
          type: number
          format: double
        modelx_precision:
          type: number
          format: double
        modelx_recall:
          type: number
          format: double
        modelx_val_confusion_html:
          type: string
          description: HTML Code of visualization of confusion matrix
        modelx_val_new_purch_html:
          type: string
          description: HTML Code of visualization of predicted/actual new purchases
        modelx_simulated_comparison_html:
          type: string
          description: HTML Code of visualization of histograms of real/simulated user bying
        modelx_expected_purchases_hist_html:
          type: string
          description: HTML Code of visualization of 2d histogram of expected/validation
            number of purchases
        modelx_little_data_warn:
          type: boolean
          description: Does this model have too little data ?
        modelx_exp_purchases_threshold:
          type: number
          description: Best threshold when expected purchases should result in at least 1 new
            purchase
          example: "0.35"
        modelx_customer_data:
          type: array
          description: Array of individual customer data
          items:
            type: object
            properties:
              probability_alive:
                type: number
                description: Prob. customer is still alive
                example: "0.85"
              excpected_num_purchases:
                type: number
                description: Expected number of new purchases in forecast period
                example: "1.35"
              customer_id:
                type: integer
                format: int64